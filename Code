// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract DegenToken is ERC20 {
    // Define the owner of the contract
    address public owner;

    // Define a modifier to restrict functions to the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    // Constructor function
    constructor(
        string memory tokenName,
        string memory tokenSymbol,
        uint256 initialSupply
    ) ERC20(tokenName, tokenSymbol) {
        _mint(msg.sender, initialSupply * 10**decimals()); // Mint initial supply with decimals
        owner = msg.sender;
    }

    // Function to mint new tokens (only owner)
    function mint(address recipient, uint256 amount) public onlyOwner {
        _mint(recipient, amount);
    }

    // Function to burn tokens (by anyone)
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    // Function to initiate token redemption (user specifies amount)
    function redeemTokens(uint256 amount) public {
        // Require the user to have enough tokens
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");

        // This function doesn't directly transfer items
        // It emits an event to signal the redemption request
        emit RedemptionRequested(msg.sender, amount);
    }

    // Event to signal a redemption request
    event RedemptionRequested(address user, uint256 amount);

    //  transfer function 
    function transfer(address recipient, uint256 amount) public override returns (bool) {
    
        return super.transfer(recipient, amount);
    }
}
